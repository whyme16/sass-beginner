// @if
@mixin blockOrHidden($boolean: true) {
    @if $boolean {
        @debug "$boolean is #{$boolean}";
        display: block;
    } @else {
        @debug "$boolean is #{$boolean}";
        display: none;
    }
}
.block {
    @include blockOrHidden;
}
.hidden {
    @include blockOrHidden(false);
}

// @for - through, to
@for $i from 1 through 3 {
  .item-#{$i} { width: 2em * $i; }
}

@for $i from 1 to 3 {
    .node-#{$i} { width: 2em * $i; }
}

$grid-prefix: span !default;
$grid-width: 60px !default;
$grid-gutter: 20px !default;

%grid {
    float: left;
    margin-left: $grid-gutter / 2;
    margin-right: $grid-gutter / 2;
}
@for $i from 1 through 12 {
    .#{$grid-prefix}-#{$i} {
        width: $grid-width * $i + $grid-gutter * ($i - 1);
        @extend %grid;
    }
}
// @for $i from 1 to 13 {
//     #{$grid-prefix}-#{$i} {
//         width: $grid-width * $i + $grid-gutter * ($i - 1);
//         @extend %grid;
//     }
// }

// @while
$types: 4;
$type-width: 20px;

@while $types > 0 {
    .while-#{$types} { width: $type-width + $types; }
    $types: $types - 1;
}

// @each
$list: adam john wynn mason kuroir;
@mixin author-images {
    @each $author in $list {
        .photo-#{$author} {
            background: url("/images/avatars/#{$author}.png") no-repeat;
        }
    }
}
.author-bio {
    @include author-images;
}

// Sass - Functions
// String Functions
// unquote($str)
// quote($str)
.test1 { content: unquote('Hello Sass!'); }
.test2 { content: unquote("'Hello Sass!'"); }
.test3 { content: unquote("I'm Web Designer"); }
.test4 { content: unquote('"Hello Sass!"'); }

.test1a { content: quote('Hello Sass!'); }
.test2a { content: quote("Hello Sass!"); }
.test3a { content: quote(' '); }

.test1b { text: to-upper-case(aaaaa); }
.test2b { text: to-upper-case(aA-aAAA-aaa); }

.test3b { text: to-lower-case(AAAAA); }
.test4b { text: to-lower-case(aA-aAAA-aaa); }

// Numeric Functions
.num1 {
    width: percentage(.2);
    height: percentage(2px / 10px);
    margin-top: percentage(2em / 10em);
}

.num2 {
    width: round(2px / 3px);
    height: round(2.2%);
    padding-top: round(14.5px);
}

.num3 {
    width: ceil(106.4px);
    height: floor(106.4px);
    margin-top: abs(-28.9px);
    margin-bottom: random();
}

// Introspection Functions
@mixin adjust-location($x, $y) {
    @if unitless($x) {
        $x: 1px * $x;
    }
    @if unitless($y) {
        $y: 1px * $y;
    }
    position: relative;
    left: $x;
    top: $y;
}
.botton {
    @include adjust-location(20px, 30);
}

// Map
$theme: (
    default: (
        bg-color: #fff,
        text-color: #444,
        link-color: #39f
    ),
    primary: (
        bg-color: #000,
	    text-color: #444,
	    link-color: #39f
    ),
    negative: (
        bg-color: #f36,
	    text-color: #fefefe,
	    link-color: #d4e
    )
);

$social-colors: (
    dribble: #ea4c89,
    facebook: #3b5998,
    github: #171515,
    google: #db4437,
    twitter: #55acee
);

// @function colors($color) {
//     @if not map-has-key($social-colors, $color) {
//         @warn "No color found for `#{$color}` in $social-colors map. Property omitted.";
//     }
//     @return map-get($social-colors, $color);
// }

// @each $social-network, $social-color in $social-colors {
//     .btn-#{$social-network} {
//         color: colors($social-network);
//     }
// }

// .btn-facebook {    
//     color: colors(facebook);
// }
// .btn-weibo {
//     font-size: 12px;    
//     color: colors(weibo);
// }

@function colors($color) {
    $names: map-keys($social-colors);
    @if not index($names, $color) {
        @warn "Warning `#{$color} is not a valid color name.`";
    }
    @return map-get($social-colors, $color);
}

// @each $name in map-keys($social-colors) {
//     .btn-#{$name} {
//         color: colors($name);
//     }
// }
@for $i from 1 through length(map-keys($social-colors)) {
    .btn-#{nth(map-keys($social-colors), $i)} {
        color: colors(nth(map-keys($social-colors), $i));
    }
}


// map-values($map), map-merge($map1, $map2)
.color-map {
    content: map-values($social-colors);
}

// map 1
$color: (
    text: #f36,
    link: #f63,
    border: #ddd,
    background: #fff
);
$typo: (
    font-size: 12px,
    line-height: 1.6
);
$newmap: map-merge($color, $typo);

#newMap {
    @each $prop, $val in $newmap {
        #{$prop}: $val;
    }
}

// Color Functions
// RGB()
// RGBA()
$color: #f36;
$bgColor: orange;
$borderColor: green;
.rgba {
    color: rgba($color, .5);
    background: rgba($bgColor, .5);
    border-color: rgba($borderColor, .5);
}

// red(), green(), blue()
.container-wrap {
    @if red($color) > 50 {
        color: #FFF;
    } @else if red($color) < 50 {
        color: #000;
    }
}

// mix()
$color1: #a63;
$color2: #fff;
$bgColor1: #f36;
$bgColor2: #e36;
$borderColor1:#c36;
$borderColor2:#b36;

.mix {
  background: mix($bgColor1, $bgColor2, .75);
  color: mix($color1, $color2, .25);
  border-color: mix($borderColor1, $bgColor2, .05);
}
